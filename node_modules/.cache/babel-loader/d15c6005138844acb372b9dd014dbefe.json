{"ast":null,"code":"var _jsxFileName = \"/home/ptckz/Documentos/Projetos/storage-project/src/pages/Repository/index.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport api from '../../services/api';\nimport Container from '../../components/Container/index';\nimport { Loading, Owner } from './styles';\nexport default class Repository extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      repository: {},\n      issues: [],\n      loading: true\n    };\n  }\n\n  async componentDidMount() {\n    const {\n      match\n    } = this.props;\n    const repoName = decodeURIComponent(match.params.repository);\n    const [repository, issues] = await Promise.all([api.get(`/repos/${repoName}`), api.get(`/repos/${repoName}/issues`, {\n      params: {\n        state: 'open',\n        per_page: 5\n      }\n    })]);\n    console.log(repository);\n    console.log(issues);\n    this.setState({\n      repository: repository.data,\n      issues: issues.data,\n      loading: false\n    });\n  }\n\n  render() {\n    const {\n      repository,\n      issues,\n      loading\n    } = this.state;\n\n    if (loading) {\n      return /*#__PURE__*/React.createElement(Loading, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 20\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Owner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: repository.owner.avatar_url,\n      alt: repository.owner.login,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }\n    }, repository.name), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }\n    }, repository.decription)));\n  }\n\n}\nRepository.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      repository: PropTypes.string\n    })\n  }).isRequired\n};","map":{"version":3,"sources":["/home/ptckz/Documentos/Projetos/storage-project/src/pages/Repository/index.js"],"names":["React","Component","PropTypes","api","Container","Loading","Owner","Repository","state","repository","issues","loading","componentDidMount","match","props","repoName","decodeURIComponent","params","Promise","all","get","per_page","console","log","setState","data","render","owner","avatar_url","login","name","decription","propTypes","shape","string","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,oBAAhB;AAEA,OAAOC,SAAP,MAAsB,kCAAtB;AACA,SAASC,OAAT,EAAkBC,KAAlB,QAA+B,UAA/B;AAEA,eAAe,MAAMC,UAAN,SAAyBN,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAS9CO,KAT8C,GAStC;AACJC,MAAAA,UAAU,EAAE,EADR;AAEJC,MAAAA,MAAM,EAAE,EAFJ;AAGJC,MAAAA,OAAO,EAAE;AAHL,KATsC;AAAA;;AAe9C,QAAMC,iBAAN,GAA0B;AACtB,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKC,KAAvB;AAEA,UAAMC,QAAQ,GAAGC,kBAAkB,CAACH,KAAK,CAACI,MAAN,CAAaR,UAAd,CAAnC;AAEA,UAAM,CAACA,UAAD,EAAaC,MAAb,IAAuB,MAAMQ,OAAO,CAACC,GAAR,CAAY,CAC3ChB,GAAG,CAACiB,GAAJ,CAAS,UAASL,QAAS,EAA3B,CAD2C,EAE3CZ,GAAG,CAACiB,GAAJ,CAAS,UAASL,QAAS,SAA3B,EAAqC;AACjCE,MAAAA,MAAM,EAAE;AACJT,QAAAA,KAAK,EAAE,MADH;AAEJa,QAAAA,QAAQ,EAAE;AAFN;AADyB,KAArC,CAF2C,CAAZ,CAAnC;AASAC,IAAAA,OAAO,CAACC,GAAR,CAAYd,UAAZ;AACAa,IAAAA,OAAO,CAACC,GAAR,CAAYb,MAAZ;AAEA,SAAKc,QAAL,CAAc;AACVf,MAAAA,UAAU,EAAEA,UAAU,CAACgB,IADb;AAEVf,MAAAA,MAAM,EAAEA,MAAM,CAACe,IAFL;AAGVd,MAAAA,OAAO,EAAE;AAHC,KAAd;AAKH;;AAEDe,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEjB,MAAAA,UAAF;AAAcC,MAAAA,MAAd;AAAsBC,MAAAA;AAAtB,QAAkC,KAAKH,KAA7C;;AACA,QAAIG,OAAJ,EAAa;AACT,0BAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH;;AACD,wBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AACI,MAAA,GAAG,EAAEF,UAAU,CAACkB,KAAX,CAAiBC,UAD1B;AAEI,MAAA,GAAG,EAAEnB,UAAU,CAACkB,KAAX,CAAiBE,KAF1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKpB,UAAU,CAACqB,IAAhB,CALJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIrB,UAAU,CAACsB,UAAf,CANJ,CADJ,CADJ;AAYH;;AAxD6C;AAA7BxB,U,CACVyB,S,GAAY;AACfnB,EAAAA,KAAK,EAAEX,SAAS,CAAC+B,KAAV,CAAgB;AACnBhB,IAAAA,MAAM,EAAEf,SAAS,CAAC+B,KAAV,CAAgB;AACpBxB,MAAAA,UAAU,EAAEP,SAAS,CAACgC;AADF,KAAhB;AADW,GAAhB,EAIJC;AALY,C","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport api from '../../services/api';\n\nimport Container from '../../components/Container/index';\nimport { Loading, Owner } from './styles';\n\nexport default class Repository extends Component {\n    static propTypes = {\n        match: PropTypes.shape({\n            params: PropTypes.shape({\n                repository: PropTypes.string,\n            }),\n        }).isRequired,\n    };\n\n    state = {\n        repository: {},\n        issues: [],\n        loading: true,\n    };\n\n    async componentDidMount() {\n        const { match } = this.props;\n\n        const repoName = decodeURIComponent(match.params.repository);\n\n        const [repository, issues] = await Promise.all([\n            api.get(`/repos/${repoName}`),\n            api.get(`/repos/${repoName}/issues`, {\n                params: {\n                    state: 'open',\n                    per_page: 5,\n                },\n            }),\n        ]);\n        console.log(repository);\n        console.log(issues);\n\n        this.setState({\n            repository: repository.data,\n            issues: issues.data,\n            loading: false,\n        });\n    }\n\n    render() {\n        const { repository, issues, loading } = this.state;\n        if (loading) {\n            return <Loading />;\n        }\n        return (\n            <Container>\n                <Owner>\n                    <img\n                        src={repository.owner.avatar_url}\n                        alt={repository.owner.login}\n                    />\n                    <h1>{repository.name}</h1>\n                    <p>{repository.decription}</p>\n                </Owner>\n            </Container>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}