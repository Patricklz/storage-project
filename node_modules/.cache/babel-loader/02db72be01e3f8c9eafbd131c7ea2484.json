{"ast":null,"code":"var _jsxFileName = \"/home/ptckz/Documentos/Projetos/storage-project/src/pages/Repository/index.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport api from '../../services/api';\nimport Container from '../../components/Container/index';\nimport { Loading } from './styles';\nexport default class Repository extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      repository: {},\n      issues: [],\n      loading: true\n    };\n  }\n\n  async componentDidMount() {\n    const {\n      match\n    } = this.props;\n    const repoName = decodeURIComponent(match.params.repository);\n    const [repository, issues] = await Promise.all([api.get(`/repos/${repoName}`), api.get(`/repos/${repoName}/issues`, {\n      params: {\n        state: 'open',\n        per_page: 5\n      }\n    })]);\n    console.log(repository);\n    console.log(issues);\n    this.setState({\n      repository: repository.data,\n      issues: issues.data,\n      loading: false\n    });\n  }\n\n  render() {\n    const {\n      repository,\n      issues,\n      loading\n    } = this.state;\n\n    if (loading) {\n      /*#__PURE__*/\n      React.createElement(Loading, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 16\n      }\n    }, \"Repository\");\n  }\n\n}\nRepository.PropTypes = {\n  match: PropTypes.shape().isRequired({\n    params: PropTypes.shape({\n      repository: PropTypes.string\n    })\n  }).isRequired\n};","map":{"version":3,"sources":["/home/ptckz/Documentos/Projetos/storage-project/src/pages/Repository/index.js"],"names":["React","Component","PropTypes","api","Container","Loading","Repository","state","repository","issues","loading","componentDidMount","match","props","repoName","decodeURIComponent","params","Promise","all","get","per_page","console","log","setState","data","render","shape","isRequired","string"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,oBAAhB;AAEA,OAAOC,SAAP,MAAsB,kCAAtB;AACA,SAASC,OAAT,QAAwB,UAAxB;AAEA,eAAe,MAAMC,UAAN,SAAyBL,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAU9CM,KAV8C,GAUtC;AACJC,MAAAA,UAAU,EAAE,EADR;AAEJC,MAAAA,MAAM,EAAE,EAFJ;AAGJC,MAAAA,OAAO,EAAE;AAHL,KAVsC;AAAA;;AAgB9C,QAAMC,iBAAN,GAA0B;AACtB,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKC,KAAvB;AAEA,UAAMC,QAAQ,GAAGC,kBAAkB,CAACH,KAAK,CAACI,MAAN,CAAaR,UAAd,CAAnC;AAEA,UAAM,CAACA,UAAD,EAAaC,MAAb,IAAuB,MAAMQ,OAAO,CAACC,GAAR,CAAY,CAC3Cf,GAAG,CAACgB,GAAJ,CAAS,UAASL,QAAS,EAA3B,CAD2C,EAE3CX,GAAG,CAACgB,GAAJ,CAAS,UAASL,QAAS,SAA3B,EAAqC;AACjCE,MAAAA,MAAM,EAAE;AACJT,QAAAA,KAAK,EAAE,MADH;AAEJa,QAAAA,QAAQ,EAAE;AAFN;AADyB,KAArC,CAF2C,CAAZ,CAAnC;AASAC,IAAAA,OAAO,CAACC,GAAR,CAAYd,UAAZ;AACAa,IAAAA,OAAO,CAACC,GAAR,CAAYb,MAAZ;AAEA,SAAKc,QAAL,CAAc;AACVf,MAAAA,UAAU,EAAEA,UAAU,CAACgB,IADb;AAEVf,MAAAA,MAAM,EAAEA,MAAM,CAACe,IAFL;AAGVd,MAAAA,OAAO,EAAE;AAHC,KAAd;AAKH;;AAEDe,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEjB,MAAAA,UAAF;AAAcC,MAAAA,MAAd;AAAsBC,MAAAA;AAAtB,QAAkC,KAAKH,KAA7C;;AACA,QAAIG,OAAJ,EAAa;AACT;AAAA,0BAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACH;;AACD,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACH;;AA9C6C;AAA7BJ,U,CAEVJ,S,GAAY;AACfU,EAAAA,KAAK,EAAEV,SAAS,CAACwB,KAAV,GAAkBC,UAAlB,CAA6B;AAChCX,IAAAA,MAAM,EAAEd,SAAS,CAACwB,KAAV,CAAgB;AACpBlB,MAAAA,UAAU,EAAEN,SAAS,CAAC0B;AADF,KAAhB;AADwB,GAA7B,EAIJD;AALY,C","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport api from '../../services/api';\n\nimport Container from '../../components/Container/index';\nimport { Loading } from './styles'\n\nexport default class Repository extends Component {\n\n    static PropTypes = {\n        match: PropTypes.shape().isRequired({\n            params: PropTypes.shape({\n                repository: PropTypes.string,\n            }),\n        }).isRequired,\n    };\n\n    state = {\n        repository: {},\n        issues: [],\n        loading: true,\n    }\n\n    async componentDidMount() {\n        const { match } = this.props;\n\n        const repoName = decodeURIComponent(match.params.repository);\n\n        const [repository, issues] = await Promise.all([\n            api.get(`/repos/${repoName}`),\n            api.get(`/repos/${repoName}/issues`, {\n                params: {\n                    state: 'open',\n                    per_page: 5,\n                },\n            }),\n        ]);\n        console.log(repository);\n        console.log(issues);\n\n        this.setState({\n            repository: repository.data,\n            issues: issues.data,\n            loading: false,\n        })\n    }\n\n    render() {\n        const { repository, issues, loading } = this.state;\n        if (loading) {\n            <Loading></Loading>\n        }\n        return <h1>Repository</h1>\n    }\n}\n"]},"metadata":{},"sourceType":"module"}