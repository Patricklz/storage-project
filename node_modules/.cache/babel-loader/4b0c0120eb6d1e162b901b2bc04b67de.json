{"ast":null,"code":"import axios from 'axios';\nimport environment from '../../environment';\nimport { Alert } from 'service';\nimport LoadingControl from 'helpers/loading-control';\nconst api = axios.create({\n  baseURL: 'https://api.github.com'\n});\nAPI.interceptors.request.use(async config => {\n  LoadingControl.add();\n\n  if (!config.url.endsWith('login')) {\n    const token = await localStorage.getItem('userToken');\n\n    if (!!token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    } else {\n      Alert.error(\"Sessão expirada, favor logar novamente\");\n    }\n  }\n\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nAPI.interceptors.response.use(response => {\n  LoadingControl.rem();\n  return response;\n}, error => {\n  LoadingControl.rem();\n\n  if (!error.response) {\n    Alert.error(error);\n  } else {\n    if (error.response.status === 401) {\n      const requestConfig = error.config;\n      return axios(requestConfig);\n    }\n\n    if (error.response.status === 400) {\n      Alert.error(error.response.data.message);\n    }\n\n    if (error.response.status === 403) {\n      Alert.error(error.response.data.message);\n    }\n  }\n\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"sources":["/home/ptckz/Documentos/Projetos/storage-project/src/services/api.js"],"names":["axios","environment","Alert","LoadingControl","api","create","baseURL","API","interceptors","request","use","config","add","url","endsWith","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","rem","status","requestConfig","data","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AAIA,MAAMC,GAAG,GAAGJ,KAAK,CAACK,MAAN,CAAa;AACrBC,EAAAA,OAAO,EAAE;AADY,CAAb,CAAZ;AAIAC,GAAG,CAACC,YAAJ,CAAiBC,OAAjB,CAAyBC,GAAzB,CAA6B,MAAOC,MAAP,IAAkB;AAC3CR,EAAAA,cAAc,CAACS,GAAf;;AACA,MAAI,CAACD,MAAM,CAACE,GAAP,CAAWC,QAAX,CAAoB,OAApB,CAAL,EAAmC;AAC/B,UAAMC,KAAK,GAAG,MAAMC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAApB;;AACA,QAAI,CAAC,CAACF,KAAN,EAAa;AACTJ,MAAAA,MAAM,CAACO,OAAP,CAAeC,aAAf,GAAgC,UAASJ,KAAM,EAA/C;AACH,KAFD,MAEO;AACHb,MAAAA,KAAK,CAACkB,KAAN,CAAY,wCAAZ;AACH;AACJ;;AACD,SAAOT,MAAP;AACH,CAXD,EAWIS,KAAD,IAAW;AACV,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAbD;AAgBAb,GAAG,CAACC,YAAJ,CAAiBe,QAAjB,CAA0Bb,GAA1B,CAA+Ba,QAAD,IAAc;AACxCpB,EAAAA,cAAc,CAACqB,GAAf;AACA,SAAOD,QAAP;AACH,CAHD,EAGIH,KAAD,IAAW;AACVjB,EAAAA,cAAc,CAACqB,GAAf;;AACA,MAAI,CAACJ,KAAK,CAACG,QAAX,EAAqB;AACjBrB,IAAAA,KAAK,CAACkB,KAAN,CAAYA,KAAZ;AACH,GAFD,MAEO;AAEH,QAAIA,KAAK,CAACG,QAAN,CAAeE,MAAf,KAA0B,GAA9B,EAAmC;AAC/B,YAAMC,aAAa,GAAGN,KAAK,CAACT,MAA5B;AACA,aAAOX,KAAK,CAAC0B,aAAD,CAAZ;AACH;;AACD,QAAIN,KAAK,CAACG,QAAN,CAAeE,MAAf,KAA0B,GAA9B,EAAmC;AAC/BvB,MAAAA,KAAK,CAACkB,KAAN,CAAYA,KAAK,CAACG,QAAN,CAAeI,IAAf,CAAoBC,OAAhC;AACH;;AACD,QAAIR,KAAK,CAACG,QAAN,CAAeE,MAAf,KAA0B,GAA9B,EAAmC;AAC/BvB,MAAAA,KAAK,CAACkB,KAAN,CAAYA,KAAK,CAACG,QAAN,CAAeI,IAAf,CAAoBC,OAAhC;AACH;AACJ;;AACD,SAAOP,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CArBD;AAuBA,eAAehB,GAAf","sourcesContent":["import axios from 'axios';\nimport environment from '../../environment';\nimport { Alert } from 'service';\nimport LoadingControl from 'helpers/loading-control';\n\n\n\nconst api = axios.create({\n    baseURL: 'https://api.github.com',\n});\n\nAPI.interceptors.request.use(async (config) => {\n    LoadingControl.add();\n    if (!config.url.endsWith('login')) {\n        const token = await localStorage.getItem('userToken');\n        if (!!token) {\n            config.headers.Authorization = `Bearer ${token}`;\n        } else {\n            Alert.error(\"Sessão expirada, favor logar novamente\");\n        }\n    }\n    return config;\n}, (error) => {\n    return Promise.reject(error);\n});\n\n\nAPI.interceptors.response.use((response) => {\n    LoadingControl.rem();\n    return response;\n}, (error) => {\n    LoadingControl.rem();\n    if (!error.response) {\n        Alert.error(error);\n    } else {\n\n        if (error.response.status === 401) {\n            const requestConfig = error.config;\n            return axios(requestConfig);\n        }\n        if (error.response.status === 400) {\n            Alert.error(error.response.data.message);\n        }\n        if (error.response.status === 403) {\n            Alert.error(error.response.data.message);\n        }\n    }\n    return Promise.reject(error);\n});\n\nexport default api;\n"]},"metadata":{},"sourceType":"module"}